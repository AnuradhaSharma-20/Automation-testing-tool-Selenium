{
  "stats": {
    "suites": 6,
    "tests": 28,
    "passes": 28,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 28,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2024-06-02T20:28:38.862Z",
    "end": "2024-06-02T20:38:25.823Z",
    "duration": 586961
  },
  "results": [
    {
      "uuid": "40627c1c-abe8-4f01-86a9-7150eee78024",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 435,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const chaiModule = await import('chai');\nexpect = chaiModule.expect;\nsetupmodule = await import('../../setup.js');\ncreateUserTest = setupmodule.createUserTest;\nviewAllUsersTest = setupmodule.viewAllUsersTest;\neditUserTest = setupmodule.editUserTest;\ndeleteUserTest = setupmodule.deleteUserTest;",
          "err": {},
          "uuid": "e0a04614-7436-4f96-8eab-98dad5326cb6",
          "parentUUID": "40627c1c-abe8-4f01-86a9-7150eee78024",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2be7b407-1438-4ab3-8ee8-aec72ef72046",
          "title": "E2E Test",
          "fullFile": "C:\\Users\\anura\\OneDrive\\Documents\\Desktop\\Test-Submission-Task-1\\__tests__\\e2e\\e2e.test.js",
          "file": "\\__tests__\\e2e\\e2e.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a user successfully",
              "fullTitle": "E2E Test should create a user successfully",
              "timedOut": false,
              "duration": 11510,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const results = await createUserTest();\nconsole.log(results);\nexpect(results).to.equal('Create user test passed!',results);",
              "err": {},
              "uuid": "df457e96-fec3-4427-9a01-19feab78a6d5",
              "parentUUID": "2be7b407-1438-4ab3-8ee8-aec72ef72046",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "df457e96-fec3-4427-9a01-19feab78a6d5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11510,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "23cb0ecd-7a89-45c8-a0ab-a7b7d38f7ce6",
          "title": "E2E Test",
          "fullFile": "C:\\Users\\anura\\OneDrive\\Documents\\Desktop\\Test-Submission-Task-1\\__tests__\\e2e\\e2e.test.js",
          "file": "\\__tests__\\e2e\\e2e.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should view all users successfully",
              "fullTitle": "E2E Test should view all users successfully",
              "timedOut": false,
              "duration": 7076,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const results = await viewAllUsersTest();\nexpect(results).to.equal('View all users test passed!',results);",
              "err": {},
              "uuid": "c57309c0-9dc6-4c38-a749-127efa67886f",
              "parentUUID": "23cb0ecd-7a89-45c8-a0ab-a7b7d38f7ce6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c57309c0-9dc6-4c38-a749-127efa67886f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7076,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f32b06bd-8395-4faa-bfe9-45258967e88e",
          "title": "E2E Test",
          "fullFile": "C:\\Users\\anura\\OneDrive\\Documents\\Desktop\\Test-Submission-Task-1\\__tests__\\e2e\\e2e.test.js",
          "file": "\\__tests__\\e2e\\e2e.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should edit a user successfully",
              "fullTitle": "E2E Test should edit a user successfully",
              "timedOut": false,
              "duration": 7388,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const results = await editUserTest(51);\nexpect(results).to.equal('Edit user test passed!',results);",
              "err": {},
              "uuid": "ffa6ee5d-3b87-411d-986a-1c867ec23a60",
              "parentUUID": "f32b06bd-8395-4faa-bfe9-45258967e88e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ffa6ee5d-3b87-411d-986a-1c867ec23a60"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7388,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "c471f0ed-9c7c-467f-8f89-048bcd1b09a6",
          "title": "E2E Test",
          "fullFile": "C:\\Users\\anura\\OneDrive\\Documents\\Desktop\\Test-Submission-Task-1\\__tests__\\e2e\\e2e.test.js",
          "file": "\\__tests__\\e2e\\e2e.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should delete a user successfully",
              "fullTitle": "E2E Test should delete a user successfully",
              "timedOut": false,
              "duration": 7166,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const results = await deleteUserTest(50);\nexpect(results).to.equal('Delete user test passed!',results);",
              "err": {},
              "uuid": "55a07ff0-62e7-4311-83e8-0e6d5ddb1858",
              "parentUUID": "c471f0ed-9c7c-467f-8f89-048bcd1b09a6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "55a07ff0-62e7-4311-83e8-0e6d5ddb1858"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7166,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "3d4cbe0f-8f4c-41cf-a146-f19fb6c64957",
      "title": "",
      "fullFile": "C:\\Users\\anura\\OneDrive\\Documents\\Desktop\\Test-Submission-Task-1\\__tests__\\integration\\integration.test.js",
      "file": "\\__tests__\\integration\\integration.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "012b43d4-d2ee-482f-a65d-7cdd9a929ab8",
          "title": "Logic tests",
          "fullFile": "C:\\Users\\anura\\OneDrive\\Documents\\Desktop\\Test-Submission-Task-1\\__tests__\\integration\\integration.test.js",
          "file": "\\__tests__\\integration\\integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Logic tests\"",
              "fullTitle": "Logic tests \"before each\" hook in \"Logic tests\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Stubbing the database.connectDB function\nconnectionStub = sinon.stub();\nconnectionStub.execute = sinon.stub().resolves(); // Stub the execute method to resolve a promise\n// Stubbing database.connectDB to return a stubbed connection object\nsinon.stub(database, 'connectDB').resolves(connectionStub);",
              "err": {},
              "uuid": "f64bb13a-e5ec-46ba-906b-90ebbac036ea",
              "parentUUID": "012b43d4-d2ee-482f-a65d-7cdd9a929ab8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Logic tests\"",
              "fullTitle": "Logic tests \"after each\" hook in \"Logic tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Restoring the original function after each test\nsinon.restore();",
              "err": {},
              "uuid": "44bf5414-2de8-4c97-a13b-1f03a6625ae1",
              "parentUUID": "012b43d4-d2ee-482f-a65d-7cdd9a929ab8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "getUsers should return all users",
              "fullTitle": "Logic tests getUsers should return all users",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeResults = [['user1', 'user2']]; // Mocking results from database\nconnectionStub.execute.resolves(fakeResults); // Resolve with fakeResults\nconst users = await logic.getUsers();\nassert.deepStrictEqual(users, fakeResults[0]);",
              "err": {},
              "uuid": "05184a41-22c2-4621-b329-f23dc61bb329",
              "parentUUID": "012b43d4-d2ee-482f-a65d-7cdd9a929ab8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getUser should return a user by id",
              "fullTitle": "Logic tests getUser should return a user by id",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeId = 1;\n//const fakeUser = \"Hema\"//{ id: fakeId, firstname: 'John', lastname: 'Doe' };\nconst userFromDB = \"Hema\"//{ id: 1, firstname: 'John', lastname: 'Doe' };\nconst fakeResults = [[userFromDB]];\nconnectionStub.execute.resolves(fakeResults);\nconst user = await logic.getUser(fakeId);\nassert.deepStrictEqual(user, userFromDB);",
              "err": {},
              "uuid": "e6a87b65-dcff-4760-8310-aaa3dc72e9ec",
              "parentUUID": "012b43d4-d2ee-482f-a65d-7cdd9a929ab8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "createUser should insert a new user into the database",
              "fullTitle": "Logic tests createUser should insert a new user into the database",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeUser = {\n  firstname: 'Jane',\n  lastname: 'Doe',\n  nickname: 'J',\n  email: 'jane@example.com',\n  age: 30,\n  phonenumber: '1234567890',\n  bio: 'Test bio'\n};\nawait logic.createUser(fakeUser);\n// Assert that connection.execute was called with the correct arguments\nsinon.assert.calledOnce(connectionStub.execute);\nsinon.assert.calledWithMatch(connectionStub.execute, sinon.match.string, [\n  fakeUser.firstname,\n  fakeUser.lastname,\n  fakeUser.nickname,\n  fakeUser.email,\n  fakeUser.age,\n  fakeUser.phonenumber,\n  fakeUser.bio\n]);",
              "err": {},
              "uuid": "01fe6a8e-cdc7-4287-8cde-432c755780a9",
              "parentUUID": "012b43d4-d2ee-482f-a65d-7cdd9a929ab8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updateUser should update an existing user in the database",
              "fullTitle": "Logic tests updateUser should update an existing user in the database",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeUser = {\n  id: 1,\n  firstname: 'Jane',\n  lastname: 'Doe',\n  nickname: 'J',\n  email: 'jane@example.com',\n  age: 30,\n  phonenumber: '1234567890',\n  bio: 'Test bio'\n};\nawait logic.updateUser(fakeUser);\n// Assert that connection.execute was called with the correct arguments\nsinon.assert.calledOnce(connectionStub.execute);\nsinon.assert.calledWithMatch(connectionStub.execute, sinon.match.string, [\n  fakeUser.firstname,\n  fakeUser.lastname,\n  fakeUser.nickname,\n  fakeUser.email,\n  fakeUser.age,\n  fakeUser.phonenumber,\n  fakeUser.bio,\n  fakeUser.id\n]);",
              "err": {},
              "uuid": "fe127cc6-d8b7-4de4-aadc-3ae2dfb9163d",
              "parentUUID": "012b43d4-d2ee-482f-a65d-7cdd9a929ab8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deleteUser should delete a user from the database",
              "fullTitle": "Logic tests deleteUser should delete a user from the database",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeUserId = 1;\nawait logic.deleteUser(fakeUserId);\n// Assert that connection.execute was called with the correct arguments\nsinon.assert.calledOnce(connectionStub.execute);\nsinon.assert.calledWithMatch(connectionStub.execute, sinon.match.string, [fakeUserId]);",
              "err": {},
              "uuid": "0afd9763-6b62-4741-86da-ec84c25c3994",
              "parentUUID": "012b43d4-d2ee-482f-a65d-7cdd9a929ab8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "05184a41-22c2-4621-b329-f23dc61bb329",
            "e6a87b65-dcff-4760-8310-aaa3dc72e9ec",
            "01fe6a8e-cdc7-4287-8cde-432c755780a9",
            "fe127cc6-d8b7-4de4-aadc-3ae2dfb9163d",
            "0afd9763-6b62-4741-86da-ec84c25c3994"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 22,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "85a5e388-51a1-4d30-95cf-814e364588ed",
      "title": "",
      "fullFile": "C:\\Users\\anura\\OneDrive\\Documents\\Desktop\\Test-Submission-Task-1\\__tests__\\unit\\unit.test.js",
      "file": "\\__tests__\\unit\\unit.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "02d2711c-0d7f-43fb-a9c5-c62539f38766",
          "title": "Logic tests",
          "fullFile": "C:\\Users\\anura\\OneDrive\\Documents\\Desktop\\Test-Submission-Task-1\\__tests__\\unit\\unit.test.js",
          "file": "\\__tests__\\unit\\unit.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Logic tests\"",
              "fullTitle": "Logic tests \"before each\" hook in \"Logic tests\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Stubbing the database.connectDB function\nconnectionStub = sinon.stub();\nconnectionStub.execute = sinon.stub().resolves(); // Stub the execute method to resolve a promise\n// Stubbing database.connectDB to return a stubbed connection object\nsinon.stub(database, 'connectDB').resolves(connectionStub);",
              "err": {},
              "uuid": "0a7fe5b4-9673-4d35-a714-5f8f18d67126",
              "parentUUID": "02d2711c-0d7f-43fb-a9c5-c62539f38766",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Logic tests\"",
              "fullTitle": "Logic tests \"after each\" hook in \"Logic tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Restoring the original function after each test\nsinon.restore();",
              "err": {},
              "uuid": "04cf9397-bc9f-4dc0-b243-2205fd5583fb",
              "parentUUID": "02d2711c-0d7f-43fb-a9c5-c62539f38766",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "getUsers should return all users",
              "fullTitle": "Logic tests getUsers should return all users",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeResults = [['user1', 'user2']]; // Mocking results from database\nconnectionStub.execute.resolves(fakeResults); // Resolve with fakeResults\nconst users = await logic.getUsers();\nassert.equal(users.length > 0, true);",
              "err": {},
              "uuid": "7e016674-8038-492c-bec9-c0be394938f5",
              "parentUUID": "02d2711c-0d7f-43fb-a9c5-c62539f38766",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getUser should return a user by id",
              "fullTitle": "Logic tests getUser should return a user by id",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeId = 1;\n//const fakeUser = \"Hema\"//{ id: fakeId, firstname: 'John', lastname: 'Doe' };\nconst userFromDB = \"Hema\"//{ id: 1, firstname: 'John', lastname: 'Doe' };\nconst fakeResults = [[userFromDB]];\nconnectionStub.execute.resolves(fakeResults);\nconst user = await logic.getUser(fakeId);\nassert.equal(user, userFromDB);",
              "err": {},
              "uuid": "e8038f8b-1570-432a-a4b7-2550d863fac4",
              "parentUUID": "02d2711c-0d7f-43fb-a9c5-c62539f38766",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "createUser should insert a new user into the database",
              "fullTitle": "Logic tests createUser should insert a new user into the database",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeUser = {\n    firstname: 'Jane',\n    lastname: 'Doe',\n    nickname: 'J',\n    email: 'jane@example.com',\n    age: 30,\n    phonenumber: '1234567890',\n    bio: 'Test bio'\n};\nawait logic.createUser(fakeUser);\n// Assert that connection.execute was called with the correct arguments\nsinon.assert.calledOnce(connectionStub.execute);\nsinon.assert.calledWithMatch(connectionStub.execute, sinon.match.string, [\n    fakeUser.firstname,\n    fakeUser.lastname,\n    fakeUser.nickname,\n    fakeUser.email,\n    fakeUser.age,\n    fakeUser.phonenumber,\n    fakeUser.bio\n]);",
              "err": {},
              "uuid": "c55305bb-ff1a-44a1-b432-8dae85e507e5",
              "parentUUID": "02d2711c-0d7f-43fb-a9c5-c62539f38766",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updateUser should update an existing user in the database",
              "fullTitle": "Logic tests updateUser should update an existing user in the database",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeUser = {\n    id: 1,\n    firstname: 'Jane',\n    lastname: 'Doe',\n    nickname: 'J',\n    email: 'jane@example.com',\n    age: 30,\n    phonenumber: '1234567890',\n    bio: 'Test bio'\n};\nawait logic.updateUser(fakeUser);\n// Assert that connection.execute was called with the correct arguments\nsinon.assert.calledOnce(connectionStub.execute);\nsinon.assert.calledWithMatch(connectionStub.execute, sinon.match.string, [\n    fakeUser.firstname,\n    fakeUser.lastname,\n    fakeUser.nickname,\n    fakeUser.email,\n    fakeUser.age,\n    fakeUser.phonenumber,\n    fakeUser.bio,\n    fakeUser.id\n]);",
              "err": {},
              "uuid": "b6150785-b48c-4a2b-9712-db243340120d",
              "parentUUID": "02d2711c-0d7f-43fb-a9c5-c62539f38766",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deleteUser should delete a user from the database",
              "fullTitle": "Logic tests deleteUser should delete a user from the database",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeUserId = 1;\nawait logic.deleteUser(fakeUserId);\n// Assert that connection.execute was called with the correct arguments\nsinon.assert.calledOnce(connectionStub.execute);\nsinon.assert.calledWithMatch(connectionStub.execute, sinon.match.string, [fakeUserId]);",
              "err": {},
              "uuid": "f97ca3d8-db3c-4540-8b19-ae7f31cb334b",
              "parentUUID": "02d2711c-0d7f-43fb-a9c5-c62539f38766",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7e016674-8038-492c-bec9-c0be394938f5",
            "e8038f8b-1570-432a-a4b7-2550d863fac4",
            "c55305bb-ff1a-44a1-b432-8dae85e507e5",
            "b6150785-b48c-4a2b-9712-db243340120d",
            "f97ca3d8-db3c-4540-8b19-ae7f31cb334b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "40627c1c-abe8-4f01-86a9-7150eee78024",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 435,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const chaiModule = await import('chai');\nexpect = chaiModule.expect;\nsetupmodule = await import('../../setup.js');\ncreateUserTest = setupmodule.createUserTest;\nviewAllUsersTest = setupmodule.viewAllUsersTest;\neditUserTest = setupmodule.editUserTest;\ndeleteUserTest = setupmodule.deleteUserTest;",
          "err": {},
          "uuid": "e0a04614-7436-4f96-8eab-98dad5326cb6",
          "parentUUID": "40627c1c-abe8-4f01-86a9-7150eee78024",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2be7b407-1438-4ab3-8ee8-aec72ef72046",
          "title": "E2E Test",
          "fullFile": "C:\\Users\\anura\\OneDrive\\Documents\\Desktop\\Test-Submission-Task-1\\__tests__\\e2e\\e2e.test.js",
          "file": "\\__tests__\\e2e\\e2e.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a user successfully",
              "fullTitle": "E2E Test should create a user successfully",
              "timedOut": false,
              "duration": 11510,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const results = await createUserTest();\nconsole.log(results);\nexpect(results).to.equal('Create user test passed!',results);",
              "err": {},
              "uuid": "df457e96-fec3-4427-9a01-19feab78a6d5",
              "parentUUID": "2be7b407-1438-4ab3-8ee8-aec72ef72046",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "df457e96-fec3-4427-9a01-19feab78a6d5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11510,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "23cb0ecd-7a89-45c8-a0ab-a7b7d38f7ce6",
          "title": "E2E Test",
          "fullFile": "C:\\Users\\anura\\OneDrive\\Documents\\Desktop\\Test-Submission-Task-1\\__tests__\\e2e\\e2e.test.js",
          "file": "\\__tests__\\e2e\\e2e.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should view all users successfully",
              "fullTitle": "E2E Test should view all users successfully",
              "timedOut": false,
              "duration": 7076,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const results = await viewAllUsersTest();\nexpect(results).to.equal('View all users test passed!',results);",
              "err": {},
              "uuid": "c57309c0-9dc6-4c38-a749-127efa67886f",
              "parentUUID": "23cb0ecd-7a89-45c8-a0ab-a7b7d38f7ce6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c57309c0-9dc6-4c38-a749-127efa67886f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7076,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f32b06bd-8395-4faa-bfe9-45258967e88e",
          "title": "E2E Test",
          "fullFile": "C:\\Users\\anura\\OneDrive\\Documents\\Desktop\\Test-Submission-Task-1\\__tests__\\e2e\\e2e.test.js",
          "file": "\\__tests__\\e2e\\e2e.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should edit a user successfully",
              "fullTitle": "E2E Test should edit a user successfully",
              "timedOut": false,
              "duration": 7388,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const results = await editUserTest(51);\nexpect(results).to.equal('Edit user test passed!',results);",
              "err": {},
              "uuid": "ffa6ee5d-3b87-411d-986a-1c867ec23a60",
              "parentUUID": "f32b06bd-8395-4faa-bfe9-45258967e88e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ffa6ee5d-3b87-411d-986a-1c867ec23a60"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7388,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "c471f0ed-9c7c-467f-8f89-048bcd1b09a6",
          "title": "E2E Test",
          "fullFile": "C:\\Users\\anura\\OneDrive\\Documents\\Desktop\\Test-Submission-Task-1\\__tests__\\e2e\\e2e.test.js",
          "file": "\\__tests__\\e2e\\e2e.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should delete a user successfully",
              "fullTitle": "E2E Test should delete a user successfully",
              "timedOut": false,
              "duration": 7166,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const results = await deleteUserTest(50);\nexpect(results).to.equal('Delete user test passed!',results);",
              "err": {},
              "uuid": "55a07ff0-62e7-4311-83e8-0e6d5ddb1858",
              "parentUUID": "c471f0ed-9c7c-467f-8f89-048bcd1b09a6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "55a07ff0-62e7-4311-83e8-0e6d5ddb1858"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7166,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "3d4cbe0f-8f4c-41cf-a146-f19fb6c64957",
      "title": "",
      "fullFile": "C:\\Users\\anura\\OneDrive\\Documents\\Desktop\\Test-Submission-Task-1\\__tests__\\integration\\integration.test.js",
      "file": "\\__tests__\\integration\\integration.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "012b43d4-d2ee-482f-a65d-7cdd9a929ab8",
          "title": "Logic tests",
          "fullFile": "C:\\Users\\anura\\OneDrive\\Documents\\Desktop\\Test-Submission-Task-1\\__tests__\\integration\\integration.test.js",
          "file": "\\__tests__\\integration\\integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Logic tests\"",
              "fullTitle": "Logic tests \"before each\" hook in \"Logic tests\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Stubbing the database.connectDB function\nconnectionStub = sinon.stub();\nconnectionStub.execute = sinon.stub().resolves(); // Stub the execute method to resolve a promise\n// Stubbing database.connectDB to return a stubbed connection object\nsinon.stub(database, 'connectDB').resolves(connectionStub);",
              "err": {},
              "uuid": "f64bb13a-e5ec-46ba-906b-90ebbac036ea",
              "parentUUID": "012b43d4-d2ee-482f-a65d-7cdd9a929ab8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Logic tests\"",
              "fullTitle": "Logic tests \"after each\" hook in \"Logic tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Restoring the original function after each test\nsinon.restore();",
              "err": {},
              "uuid": "44bf5414-2de8-4c97-a13b-1f03a6625ae1",
              "parentUUID": "012b43d4-d2ee-482f-a65d-7cdd9a929ab8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "getUsers should return all users",
              "fullTitle": "Logic tests getUsers should return all users",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeResults = [['user1', 'user2']]; // Mocking results from database\nconnectionStub.execute.resolves(fakeResults); // Resolve with fakeResults\nconst users = await logic.getUsers();\nassert.deepStrictEqual(users, fakeResults[0]);",
              "err": {},
              "uuid": "05184a41-22c2-4621-b329-f23dc61bb329",
              "parentUUID": "012b43d4-d2ee-482f-a65d-7cdd9a929ab8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getUser should return a user by id",
              "fullTitle": "Logic tests getUser should return a user by id",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeId = 1;\n//const fakeUser = \"Hema\"//{ id: fakeId, firstname: 'John', lastname: 'Doe' };\nconst userFromDB = \"Hema\"//{ id: 1, firstname: 'John', lastname: 'Doe' };\nconst fakeResults = [[userFromDB]];\nconnectionStub.execute.resolves(fakeResults);\nconst user = await logic.getUser(fakeId);\nassert.deepStrictEqual(user, userFromDB);",
              "err": {},
              "uuid": "e6a87b65-dcff-4760-8310-aaa3dc72e9ec",
              "parentUUID": "012b43d4-d2ee-482f-a65d-7cdd9a929ab8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "createUser should insert a new user into the database",
              "fullTitle": "Logic tests createUser should insert a new user into the database",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeUser = {\n  firstname: 'Jane',\n  lastname: 'Doe',\n  nickname: 'J',\n  email: 'jane@example.com',\n  age: 30,\n  phonenumber: '1234567890',\n  bio: 'Test bio'\n};\nawait logic.createUser(fakeUser);\n// Assert that connection.execute was called with the correct arguments\nsinon.assert.calledOnce(connectionStub.execute);\nsinon.assert.calledWithMatch(connectionStub.execute, sinon.match.string, [\n  fakeUser.firstname,\n  fakeUser.lastname,\n  fakeUser.nickname,\n  fakeUser.email,\n  fakeUser.age,\n  fakeUser.phonenumber,\n  fakeUser.bio\n]);",
              "err": {},
              "uuid": "01fe6a8e-cdc7-4287-8cde-432c755780a9",
              "parentUUID": "012b43d4-d2ee-482f-a65d-7cdd9a929ab8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updateUser should update an existing user in the database",
              "fullTitle": "Logic tests updateUser should update an existing user in the database",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeUser = {\n  id: 1,\n  firstname: 'Jane',\n  lastname: 'Doe',\n  nickname: 'J',\n  email: 'jane@example.com',\n  age: 30,\n  phonenumber: '1234567890',\n  bio: 'Test bio'\n};\nawait logic.updateUser(fakeUser);\n// Assert that connection.execute was called with the correct arguments\nsinon.assert.calledOnce(connectionStub.execute);\nsinon.assert.calledWithMatch(connectionStub.execute, sinon.match.string, [\n  fakeUser.firstname,\n  fakeUser.lastname,\n  fakeUser.nickname,\n  fakeUser.email,\n  fakeUser.age,\n  fakeUser.phonenumber,\n  fakeUser.bio,\n  fakeUser.id\n]);",
              "err": {},
              "uuid": "fe127cc6-d8b7-4de4-aadc-3ae2dfb9163d",
              "parentUUID": "012b43d4-d2ee-482f-a65d-7cdd9a929ab8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deleteUser should delete a user from the database",
              "fullTitle": "Logic tests deleteUser should delete a user from the database",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeUserId = 1;\nawait logic.deleteUser(fakeUserId);\n// Assert that connection.execute was called with the correct arguments\nsinon.assert.calledOnce(connectionStub.execute);\nsinon.assert.calledWithMatch(connectionStub.execute, sinon.match.string, [fakeUserId]);",
              "err": {},
              "uuid": "0afd9763-6b62-4741-86da-ec84c25c3994",
              "parentUUID": "012b43d4-d2ee-482f-a65d-7cdd9a929ab8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "05184a41-22c2-4621-b329-f23dc61bb329",
            "e6a87b65-dcff-4760-8310-aaa3dc72e9ec",
            "01fe6a8e-cdc7-4287-8cde-432c755780a9",
            "fe127cc6-d8b7-4de4-aadc-3ae2dfb9163d",
            "0afd9763-6b62-4741-86da-ec84c25c3994"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 22,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "85a5e388-51a1-4d30-95cf-814e364588ed",
      "title": "",
      "fullFile": "C:\\Users\\anura\\OneDrive\\Documents\\Desktop\\Test-Submission-Task-1\\__tests__\\unit\\unit.test.js",
      "file": "\\__tests__\\unit\\unit.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "02d2711c-0d7f-43fb-a9c5-c62539f38766",
          "title": "Logic tests",
          "fullFile": "C:\\Users\\anura\\OneDrive\\Documents\\Desktop\\Test-Submission-Task-1\\__tests__\\unit\\unit.test.js",
          "file": "\\__tests__\\unit\\unit.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Logic tests\"",
              "fullTitle": "Logic tests \"before each\" hook in \"Logic tests\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Stubbing the database.connectDB function\nconnectionStub = sinon.stub();\nconnectionStub.execute = sinon.stub().resolves(); // Stub the execute method to resolve a promise\n// Stubbing database.connectDB to return a stubbed connection object\nsinon.stub(database, 'connectDB').resolves(connectionStub);",
              "err": {},
              "uuid": "0a7fe5b4-9673-4d35-a714-5f8f18d67126",
              "parentUUID": "02d2711c-0d7f-43fb-a9c5-c62539f38766",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Logic tests\"",
              "fullTitle": "Logic tests \"after each\" hook in \"Logic tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Restoring the original function after each test\nsinon.restore();",
              "err": {},
              "uuid": "04cf9397-bc9f-4dc0-b243-2205fd5583fb",
              "parentUUID": "02d2711c-0d7f-43fb-a9c5-c62539f38766",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "getUsers should return all users",
              "fullTitle": "Logic tests getUsers should return all users",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeResults = [['user1', 'user2']]; // Mocking results from database\nconnectionStub.execute.resolves(fakeResults); // Resolve with fakeResults\nconst users = await logic.getUsers();\nassert.equal(users.length > 0, true);",
              "err": {},
              "uuid": "7e016674-8038-492c-bec9-c0be394938f5",
              "parentUUID": "02d2711c-0d7f-43fb-a9c5-c62539f38766",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getUser should return a user by id",
              "fullTitle": "Logic tests getUser should return a user by id",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeId = 1;\n//const fakeUser = \"Hema\"//{ id: fakeId, firstname: 'John', lastname: 'Doe' };\nconst userFromDB = \"Hema\"//{ id: 1, firstname: 'John', lastname: 'Doe' };\nconst fakeResults = [[userFromDB]];\nconnectionStub.execute.resolves(fakeResults);\nconst user = await logic.getUser(fakeId);\nassert.equal(user, userFromDB);",
              "err": {},
              "uuid": "e8038f8b-1570-432a-a4b7-2550d863fac4",
              "parentUUID": "02d2711c-0d7f-43fb-a9c5-c62539f38766",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "createUser should insert a new user into the database",
              "fullTitle": "Logic tests createUser should insert a new user into the database",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeUser = {\n    firstname: 'Jane',\n    lastname: 'Doe',\n    nickname: 'J',\n    email: 'jane@example.com',\n    age: 30,\n    phonenumber: '1234567890',\n    bio: 'Test bio'\n};\nawait logic.createUser(fakeUser);\n// Assert that connection.execute was called with the correct arguments\nsinon.assert.calledOnce(connectionStub.execute);\nsinon.assert.calledWithMatch(connectionStub.execute, sinon.match.string, [\n    fakeUser.firstname,\n    fakeUser.lastname,\n    fakeUser.nickname,\n    fakeUser.email,\n    fakeUser.age,\n    fakeUser.phonenumber,\n    fakeUser.bio\n]);",
              "err": {},
              "uuid": "c55305bb-ff1a-44a1-b432-8dae85e507e5",
              "parentUUID": "02d2711c-0d7f-43fb-a9c5-c62539f38766",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updateUser should update an existing user in the database",
              "fullTitle": "Logic tests updateUser should update an existing user in the database",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeUser = {\n    id: 1,\n    firstname: 'Jane',\n    lastname: 'Doe',\n    nickname: 'J',\n    email: 'jane@example.com',\n    age: 30,\n    phonenumber: '1234567890',\n    bio: 'Test bio'\n};\nawait logic.updateUser(fakeUser);\n// Assert that connection.execute was called with the correct arguments\nsinon.assert.calledOnce(connectionStub.execute);\nsinon.assert.calledWithMatch(connectionStub.execute, sinon.match.string, [\n    fakeUser.firstname,\n    fakeUser.lastname,\n    fakeUser.nickname,\n    fakeUser.email,\n    fakeUser.age,\n    fakeUser.phonenumber,\n    fakeUser.bio,\n    fakeUser.id\n]);",
              "err": {},
              "uuid": "b6150785-b48c-4a2b-9712-db243340120d",
              "parentUUID": "02d2711c-0d7f-43fb-a9c5-c62539f38766",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deleteUser should delete a user from the database",
              "fullTitle": "Logic tests deleteUser should delete a user from the database",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeUserId = 1;\nawait logic.deleteUser(fakeUserId);\n// Assert that connection.execute was called with the correct arguments\nsinon.assert.calledOnce(connectionStub.execute);\nsinon.assert.calledWithMatch(connectionStub.execute, sinon.match.string, [fakeUserId]);",
              "err": {},
              "uuid": "f97ca3d8-db3c-4540-8b19-ae7f31cb334b",
              "parentUUID": "02d2711c-0d7f-43fb-a9c5-c62539f38766",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7e016674-8038-492c-bec9-c0be394938f5",
            "e8038f8b-1570-432a-a4b7-2550d863fac4",
            "c55305bb-ff1a-44a1-b432-8dae85e507e5",
            "b6150785-b48c-4a2b-9712-db243340120d",
            "f97ca3d8-db3c-4540-8b19-ae7f31cb334b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "e2e",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "e2e"
      },
      "version": "6.2.0"
    }
  }
}