{
  "stats": {
    "suites": 1,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2024-06-03T11:42:01.331Z",
    "end": "2024-06-03T11:42:01.460Z",
    "duration": 129,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9a13d797-c191-407d-9132-487058ac30a0",
      "title": "",
      "fullFile": "C:\\Users\\anura\\OneDrive\\Documents\\Desktop\\Test-Submission-Task-1\\__tests__\\unit\\unit.test.js",
      "file": "\\__tests__\\unit\\unit.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "faa3b3a7-d738-4c1f-a4cb-e8d03b335396",
          "title": "Logic tests",
          "fullFile": "C:\\Users\\anura\\OneDrive\\Documents\\Desktop\\Test-Submission-Task-1\\__tests__\\unit\\unit.test.js",
          "file": "\\__tests__\\unit\\unit.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Logic tests\"",
              "fullTitle": "Logic tests \"before each\" hook in \"Logic tests\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Stubbing the database.connectDB function\nconnectionStub = sinon.stub();\nconnectionStub.execute = sinon.stub().resolves(); // Stub the execute method to resolve a promise\n// Stubbing database.connectDB to return a stubbed connection object\nsinon.stub(database, 'connectDB').resolves(connectionStub);",
              "err": {},
              "uuid": "91d845b5-bd07-4d10-9a82-e8f89bf0a7e7",
              "parentUUID": "faa3b3a7-d738-4c1f-a4cb-e8d03b335396",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Logic tests\"",
              "fullTitle": "Logic tests \"after each\" hook in \"Logic tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Restoring the original function after each test\nsinon.restore();",
              "err": {},
              "uuid": "0d2ec185-0c5c-4aa0-bfa0-4c9f7a79bb17",
              "parentUUID": "faa3b3a7-d738-4c1f-a4cb-e8d03b335396",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "getUsers should return all users",
              "fullTitle": "Logic tests getUsers should return all users",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeResults = [['user1', 'user2']]; // Mocking results from database\nconnectionStub.execute.resolves(fakeResults); // Resolve with fakeResults\nconst users = await logic.getUsers();\nassert.equal(users.length > 0, true);",
              "err": {},
              "uuid": "318ced59-80f5-40bf-9bba-4ee4af6e6b98",
              "parentUUID": "faa3b3a7-d738-4c1f-a4cb-e8d03b335396",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getUser should return a user by id",
              "fullTitle": "Logic tests getUser should return a user by id",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeId = 1;\n//const fakeUser = \"Hema\"//{ id: fakeId, firstname: 'John', lastname: 'Doe' };\nconst userFromDB = \"Hema\"//{ id: 1, firstname: 'John', lastname: 'Doe' };\nconst fakeResults = [[userFromDB]];\nconnectionStub.execute.resolves(fakeResults);\nconst user = await logic.getUser(fakeId);\nassert.equal(user, userFromDB);",
              "err": {},
              "uuid": "aeba76e0-20ab-4359-809c-ef6bdc3c24cd",
              "parentUUID": "faa3b3a7-d738-4c1f-a4cb-e8d03b335396",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "createUser should insert a new user into the database",
              "fullTitle": "Logic tests createUser should insert a new user into the database",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeUser = {\n    firstname: 'Jane',\n    lastname: 'Doe',\n    nickname: 'J',\n    email: 'jane@example.com',\n    age: 30,\n    phonenumber: '1234567890',\n    bio: 'Test bio'\n};\nawait logic.createUser(fakeUser);\n// Assert that connection.execute was called with the correct arguments\nsinon.assert.calledOnce(connectionStub.execute);\nsinon.assert.calledWithMatch(connectionStub.execute, sinon.match.string, [\n    fakeUser.firstname,\n    fakeUser.lastname,\n    fakeUser.nickname,\n    fakeUser.email,\n    fakeUser.age,\n    fakeUser.phonenumber,\n    fakeUser.bio\n]);",
              "err": {},
              "uuid": "7def3e92-c334-4096-ba51-318789fa7768",
              "parentUUID": "faa3b3a7-d738-4c1f-a4cb-e8d03b335396",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updateUser should update an existing user in the database",
              "fullTitle": "Logic tests updateUser should update an existing user in the database",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeUser = {\n    id: 1,\n    firstname: 'Jane',\n    lastname: 'Doe',\n    nickname: 'J',\n    email: 'jane@example.com',\n    age: 30,\n    phonenumber: '1234567890',\n    bio: 'Test bio'\n};\nawait logic.updateUser(fakeUser);\n// Assert that connection.execute was called with the correct arguments\nsinon.assert.calledOnce(connectionStub.execute);\nsinon.assert.calledWithMatch(connectionStub.execute, sinon.match.string, [\n    fakeUser.firstname,\n    fakeUser.lastname,\n    fakeUser.nickname,\n    fakeUser.email,\n    fakeUser.age,\n    fakeUser.phonenumber,\n    fakeUser.bio,\n    fakeUser.id\n]);",
              "err": {},
              "uuid": "5388e766-854e-4317-ba2b-7559f9181e2e",
              "parentUUID": "faa3b3a7-d738-4c1f-a4cb-e8d03b335396",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deleteUser should delete a user from the database",
              "fullTitle": "Logic tests deleteUser should delete a user from the database",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeUserId = 1;\nawait logic.deleteUser(fakeUserId);\n// Assert that connection.execute was called with the correct arguments\nsinon.assert.calledOnce(connectionStub.execute);\nsinon.assert.calledWithMatch(connectionStub.execute, sinon.match.string, [fakeUserId]);",
              "err": {},
              "uuid": "cc3e7140-1464-4d96-872a-853f83043924",
              "parentUUID": "faa3b3a7-d738-4c1f-a4cb-e8d03b335396",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "318ced59-80f5-40bf-9bba-4ee4af6e6b98",
            "aeba76e0-20ab-4359-809c-ef6bdc3c24cd",
            "7def3e92-c334-4096-ba51-318789fa7768",
            "5388e766-854e-4317-ba2b-7559f9181e2e",
            "cc3e7140-1464-4d96-872a-853f83043924"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 32,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "unit",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "unit"
      },
      "version": "6.2.0"
    }
  }
}