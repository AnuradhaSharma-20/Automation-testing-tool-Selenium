{
  "stats": {
    "suites": 1,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2024-06-03T11:42:19.934Z",
    "end": "2024-06-03T11:42:20.017Z",
    "duration": 83,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "939cbc57-7825-4eda-9e28-d91cd7eed4c2",
      "title": "",
      "fullFile": "C:\\Users\\anura\\OneDrive\\Documents\\Desktop\\Test-Submission-Task-1\\__tests__\\integration\\integration.test.js",
      "file": "\\__tests__\\integration\\integration.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f92ec336-b7b1-4192-a701-ed5bf4dbc8ad",
          "title": "Logic tests",
          "fullFile": "C:\\Users\\anura\\OneDrive\\Documents\\Desktop\\Test-Submission-Task-1\\__tests__\\integration\\integration.test.js",
          "file": "\\__tests__\\integration\\integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Logic tests\"",
              "fullTitle": "Logic tests \"before each\" hook in \"Logic tests\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Stubbing the database.connectDB function\nconnectionStub = sinon.stub();\nconnectionStub.execute = sinon.stub().resolves(); // Stub the execute method to resolve a promise\n// Stubbing database.connectDB to return a stubbed connection object\nsinon.stub(database, 'connectDB').resolves(connectionStub);",
              "err": {},
              "uuid": "8dd2d9ad-ead3-4729-bfdf-bfcfd6d7dfd1",
              "parentUUID": "f92ec336-b7b1-4192-a701-ed5bf4dbc8ad",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Logic tests\"",
              "fullTitle": "Logic tests \"after each\" hook in \"Logic tests\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Restoring the original function after each test\nsinon.restore();",
              "err": {},
              "uuid": "c0f7a001-af86-4f82-a12d-f81852f2dc0e",
              "parentUUID": "f92ec336-b7b1-4192-a701-ed5bf4dbc8ad",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "getUsers should return all users",
              "fullTitle": "Logic tests getUsers should return all users",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeResults = [['user1', 'user2']]; // Mocking results from database\nconnectionStub.execute.resolves(fakeResults); // Resolve with fakeResults\nconst users = await logic.getUsers();\nassert.deepStrictEqual(users, fakeResults[0]);",
              "err": {},
              "uuid": "5b476c22-7a32-49b4-992b-622852bac5ed",
              "parentUUID": "f92ec336-b7b1-4192-a701-ed5bf4dbc8ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getUser should return a user by id",
              "fullTitle": "Logic tests getUser should return a user by id",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeId = 1;\n//const fakeUser = \"Hema\"//{ id: fakeId, firstname: 'John', lastname: 'Doe' };\nconst userFromDB = \"Hema\"//{ id: 1, firstname: 'John', lastname: 'Doe' };\nconst fakeResults = [[userFromDB]];\nconnectionStub.execute.resolves(fakeResults);\nconst user = await logic.getUser(fakeId);\nassert.deepStrictEqual(user, userFromDB);",
              "err": {},
              "uuid": "f2e77b0d-4b94-461c-ab3f-37f8faa31bb2",
              "parentUUID": "f92ec336-b7b1-4192-a701-ed5bf4dbc8ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "createUser should insert a new user into the database",
              "fullTitle": "Logic tests createUser should insert a new user into the database",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeUser = {\n  firstname: 'Jane',\n  lastname: 'Doe',\n  nickname: 'J',\n  email: 'jane@example.com',\n  age: 30,\n  phonenumber: '1234567890',\n  bio: 'Test bio'\n};\nawait logic.createUser(fakeUser);\n// Assert that connection.execute was called with the correct arguments\nsinon.assert.calledOnce(connectionStub.execute);\nsinon.assert.calledWithMatch(connectionStub.execute, sinon.match.string, [\n  fakeUser.firstname,\n  fakeUser.lastname,\n  fakeUser.nickname,\n  fakeUser.email,\n  fakeUser.age,\n  fakeUser.phonenumber,\n  fakeUser.bio\n]);",
              "err": {},
              "uuid": "d763aefb-8edd-4bae-81c5-824866807dd6",
              "parentUUID": "f92ec336-b7b1-4192-a701-ed5bf4dbc8ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updateUser should update an existing user in the database",
              "fullTitle": "Logic tests updateUser should update an existing user in the database",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeUser = {\n  id: 1,\n  firstname: 'Jane',\n  lastname: 'Doe',\n  nickname: 'J',\n  email: 'jane@example.com',\n  age: 30,\n  phonenumber: '1234567890',\n  bio: 'Test bio'\n};\nawait logic.updateUser(fakeUser);\n// Assert that connection.execute was called with the correct arguments\nsinon.assert.calledOnce(connectionStub.execute);\nsinon.assert.calledWithMatch(connectionStub.execute, sinon.match.string, [\n  fakeUser.firstname,\n  fakeUser.lastname,\n  fakeUser.nickname,\n  fakeUser.email,\n  fakeUser.age,\n  fakeUser.phonenumber,\n  fakeUser.bio,\n  fakeUser.id\n]);",
              "err": {},
              "uuid": "7040a6d6-3055-4187-8249-7d35cc34a73e",
              "parentUUID": "f92ec336-b7b1-4192-a701-ed5bf4dbc8ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deleteUser should delete a user from the database",
              "fullTitle": "Logic tests deleteUser should delete a user from the database",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeUserId = 1;\nawait logic.deleteUser(fakeUserId);\n// Assert that connection.execute was called with the correct arguments\nsinon.assert.calledOnce(connectionStub.execute);\nsinon.assert.calledWithMatch(connectionStub.execute, sinon.match.string, [fakeUserId]);",
              "err": {},
              "uuid": "af31eee4-2c97-4e99-9671-29ecbe668ff9",
              "parentUUID": "f92ec336-b7b1-4192-a701-ed5bf4dbc8ad",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5b476c22-7a32-49b4-992b-622852bac5ed",
            "f2e77b0d-4b94-461c-ab3f-37f8faa31bb2",
            "d763aefb-8edd-4bae-81c5-824866807dd6",
            "7040a6d6-3055-4187-8249-7d35cc34a73e",
            "af31eee4-2c97-4e99-9671-29ecbe668ff9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 36,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "integration",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "integration"
      },
      "version": "6.2.0"
    }
  }
}